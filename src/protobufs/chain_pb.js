// source: chain.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.chain.ChannelMigrationRequest', null, global);
goog.exportSymbol('proto.chain.CooperativeSettleRequest', null, global);
goog.exportSymbol('proto.chain.CooperativeWithdrawRequest', null, global);
goog.exportSymbol('proto.chain.OpenChannelRequest', null, global);
goog.exportSymbol('proto.chain.ResolvePayByConditionsRequest', null, global);
goog.exportSymbol('proto.chain.SignedSimplexState', null, global);
goog.exportSymbol('proto.chain.SignedSimplexStateArray', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chain.OpenChannelRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.chain.OpenChannelRequest.repeatedFields_, null);
};
goog.inherits(proto.chain.OpenChannelRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chain.OpenChannelRequest.displayName = 'proto.chain.OpenChannelRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chain.CooperativeWithdrawRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.chain.CooperativeWithdrawRequest.repeatedFields_, null);
};
goog.inherits(proto.chain.CooperativeWithdrawRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chain.CooperativeWithdrawRequest.displayName = 'proto.chain.CooperativeWithdrawRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chain.CooperativeSettleRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.chain.CooperativeSettleRequest.repeatedFields_, null);
};
goog.inherits(proto.chain.CooperativeSettleRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chain.CooperativeSettleRequest.displayName = 'proto.chain.CooperativeSettleRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chain.ResolvePayByConditionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.chain.ResolvePayByConditionsRequest.repeatedFields_, null);
};
goog.inherits(proto.chain.ResolvePayByConditionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chain.ResolvePayByConditionsRequest.displayName = 'proto.chain.ResolvePayByConditionsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chain.SignedSimplexState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.chain.SignedSimplexState.repeatedFields_, null);
};
goog.inherits(proto.chain.SignedSimplexState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chain.SignedSimplexState.displayName = 'proto.chain.SignedSimplexState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chain.SignedSimplexStateArray = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.chain.SignedSimplexStateArray.repeatedFields_, null);
};
goog.inherits(proto.chain.SignedSimplexStateArray, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chain.SignedSimplexStateArray.displayName = 'proto.chain.SignedSimplexStateArray';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chain.ChannelMigrationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.chain.ChannelMigrationRequest.repeatedFields_, null);
};
goog.inherits(proto.chain.ChannelMigrationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chain.ChannelMigrationRequest.displayName = 'proto.chain.ChannelMigrationRequest';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.chain.OpenChannelRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chain.OpenChannelRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.chain.OpenChannelRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chain.OpenChannelRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chain.OpenChannelRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelInitializer: msg.getChannelInitializer_asB64(),
    sigsList: msg.getSigsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chain.OpenChannelRequest}
 */
proto.chain.OpenChannelRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chain.OpenChannelRequest;
  return proto.chain.OpenChannelRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chain.OpenChannelRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chain.OpenChannelRequest}
 */
proto.chain.OpenChannelRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChannelInitializer(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addSigs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chain.OpenChannelRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chain.OpenChannelRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chain.OpenChannelRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chain.OpenChannelRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelInitializer_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSigsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes channel_initializer = 1;
 * @return {!(string|Uint8Array)}
 */
proto.chain.OpenChannelRequest.prototype.getChannelInitializer = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes channel_initializer = 1;
 * This is a type-conversion wrapper around `getChannelInitializer()`
 * @return {string}
 */
proto.chain.OpenChannelRequest.prototype.getChannelInitializer_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChannelInitializer()));
};


/**
 * optional bytes channel_initializer = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChannelInitializer()`
 * @return {!Uint8Array}
 */
proto.chain.OpenChannelRequest.prototype.getChannelInitializer_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChannelInitializer()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.chain.OpenChannelRequest} returns this
 */
proto.chain.OpenChannelRequest.prototype.setChannelInitializer = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated bytes sigs = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.chain.OpenChannelRequest.prototype.getSigsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes sigs = 2;
 * This is a type-conversion wrapper around `getSigsList()`
 * @return {!Array<string>}
 */
proto.chain.OpenChannelRequest.prototype.getSigsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getSigsList()));
};


/**
 * repeated bytes sigs = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSigsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.chain.OpenChannelRequest.prototype.getSigsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getSigsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.chain.OpenChannelRequest} returns this
 */
proto.chain.OpenChannelRequest.prototype.setSigsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.chain.OpenChannelRequest} returns this
 */
proto.chain.OpenChannelRequest.prototype.addSigs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.chain.OpenChannelRequest} returns this
 */
proto.chain.OpenChannelRequest.prototype.clearSigsList = function() {
  return this.setSigsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.chain.CooperativeWithdrawRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chain.CooperativeWithdrawRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.chain.CooperativeWithdrawRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chain.CooperativeWithdrawRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chain.CooperativeWithdrawRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    withdrawInfo: msg.getWithdrawInfo_asB64(),
    sigsList: msg.getSigsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chain.CooperativeWithdrawRequest}
 */
proto.chain.CooperativeWithdrawRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chain.CooperativeWithdrawRequest;
  return proto.chain.CooperativeWithdrawRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chain.CooperativeWithdrawRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chain.CooperativeWithdrawRequest}
 */
proto.chain.CooperativeWithdrawRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setWithdrawInfo(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addSigs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chain.CooperativeWithdrawRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chain.CooperativeWithdrawRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chain.CooperativeWithdrawRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chain.CooperativeWithdrawRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWithdrawInfo_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSigsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes withdraw_info = 1;
 * @return {!(string|Uint8Array)}
 */
proto.chain.CooperativeWithdrawRequest.prototype.getWithdrawInfo = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes withdraw_info = 1;
 * This is a type-conversion wrapper around `getWithdrawInfo()`
 * @return {string}
 */
proto.chain.CooperativeWithdrawRequest.prototype.getWithdrawInfo_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getWithdrawInfo()));
};


/**
 * optional bytes withdraw_info = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getWithdrawInfo()`
 * @return {!Uint8Array}
 */
proto.chain.CooperativeWithdrawRequest.prototype.getWithdrawInfo_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getWithdrawInfo()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.chain.CooperativeWithdrawRequest} returns this
 */
proto.chain.CooperativeWithdrawRequest.prototype.setWithdrawInfo = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated bytes sigs = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.chain.CooperativeWithdrawRequest.prototype.getSigsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes sigs = 2;
 * This is a type-conversion wrapper around `getSigsList()`
 * @return {!Array<string>}
 */
proto.chain.CooperativeWithdrawRequest.prototype.getSigsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getSigsList()));
};


/**
 * repeated bytes sigs = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSigsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.chain.CooperativeWithdrawRequest.prototype.getSigsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getSigsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.chain.CooperativeWithdrawRequest} returns this
 */
proto.chain.CooperativeWithdrawRequest.prototype.setSigsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.chain.CooperativeWithdrawRequest} returns this
 */
proto.chain.CooperativeWithdrawRequest.prototype.addSigs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.chain.CooperativeWithdrawRequest} returns this
 */
proto.chain.CooperativeWithdrawRequest.prototype.clearSigsList = function() {
  return this.setSigsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.chain.CooperativeSettleRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chain.CooperativeSettleRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.chain.CooperativeSettleRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chain.CooperativeSettleRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chain.CooperativeSettleRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    settleInfo: msg.getSettleInfo_asB64(),
    sigsList: msg.getSigsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chain.CooperativeSettleRequest}
 */
proto.chain.CooperativeSettleRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chain.CooperativeSettleRequest;
  return proto.chain.CooperativeSettleRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chain.CooperativeSettleRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chain.CooperativeSettleRequest}
 */
proto.chain.CooperativeSettleRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSettleInfo(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addSigs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chain.CooperativeSettleRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chain.CooperativeSettleRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chain.CooperativeSettleRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chain.CooperativeSettleRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSettleInfo_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSigsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes settle_info = 1;
 * @return {!(string|Uint8Array)}
 */
proto.chain.CooperativeSettleRequest.prototype.getSettleInfo = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes settle_info = 1;
 * This is a type-conversion wrapper around `getSettleInfo()`
 * @return {string}
 */
proto.chain.CooperativeSettleRequest.prototype.getSettleInfo_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSettleInfo()));
};


/**
 * optional bytes settle_info = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSettleInfo()`
 * @return {!Uint8Array}
 */
proto.chain.CooperativeSettleRequest.prototype.getSettleInfo_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSettleInfo()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.chain.CooperativeSettleRequest} returns this
 */
proto.chain.CooperativeSettleRequest.prototype.setSettleInfo = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated bytes sigs = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.chain.CooperativeSettleRequest.prototype.getSigsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes sigs = 2;
 * This is a type-conversion wrapper around `getSigsList()`
 * @return {!Array<string>}
 */
proto.chain.CooperativeSettleRequest.prototype.getSigsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getSigsList()));
};


/**
 * repeated bytes sigs = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSigsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.chain.CooperativeSettleRequest.prototype.getSigsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getSigsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.chain.CooperativeSettleRequest} returns this
 */
proto.chain.CooperativeSettleRequest.prototype.setSigsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.chain.CooperativeSettleRequest} returns this
 */
proto.chain.CooperativeSettleRequest.prototype.addSigs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.chain.CooperativeSettleRequest} returns this
 */
proto.chain.CooperativeSettleRequest.prototype.clearSigsList = function() {
  return this.setSigsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.chain.ResolvePayByConditionsRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chain.ResolvePayByConditionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.chain.ResolvePayByConditionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chain.ResolvePayByConditionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chain.ResolvePayByConditionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    condPay: msg.getCondPay_asB64(),
    hashPreimagesList: msg.getHashPreimagesList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chain.ResolvePayByConditionsRequest}
 */
proto.chain.ResolvePayByConditionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chain.ResolvePayByConditionsRequest;
  return proto.chain.ResolvePayByConditionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chain.ResolvePayByConditionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chain.ResolvePayByConditionsRequest}
 */
proto.chain.ResolvePayByConditionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCondPay(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addHashPreimages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chain.ResolvePayByConditionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chain.ResolvePayByConditionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chain.ResolvePayByConditionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chain.ResolvePayByConditionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCondPay_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getHashPreimagesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes cond_pay = 1;
 * @return {!(string|Uint8Array)}
 */
proto.chain.ResolvePayByConditionsRequest.prototype.getCondPay = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes cond_pay = 1;
 * This is a type-conversion wrapper around `getCondPay()`
 * @return {string}
 */
proto.chain.ResolvePayByConditionsRequest.prototype.getCondPay_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCondPay()));
};


/**
 * optional bytes cond_pay = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCondPay()`
 * @return {!Uint8Array}
 */
proto.chain.ResolvePayByConditionsRequest.prototype.getCondPay_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCondPay()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.chain.ResolvePayByConditionsRequest} returns this
 */
proto.chain.ResolvePayByConditionsRequest.prototype.setCondPay = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated bytes hash_preimages = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.chain.ResolvePayByConditionsRequest.prototype.getHashPreimagesList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes hash_preimages = 2;
 * This is a type-conversion wrapper around `getHashPreimagesList()`
 * @return {!Array<string>}
 */
proto.chain.ResolvePayByConditionsRequest.prototype.getHashPreimagesList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getHashPreimagesList()));
};


/**
 * repeated bytes hash_preimages = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHashPreimagesList()`
 * @return {!Array<!Uint8Array>}
 */
proto.chain.ResolvePayByConditionsRequest.prototype.getHashPreimagesList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getHashPreimagesList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.chain.ResolvePayByConditionsRequest} returns this
 */
proto.chain.ResolvePayByConditionsRequest.prototype.setHashPreimagesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.chain.ResolvePayByConditionsRequest} returns this
 */
proto.chain.ResolvePayByConditionsRequest.prototype.addHashPreimages = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.chain.ResolvePayByConditionsRequest} returns this
 */
proto.chain.ResolvePayByConditionsRequest.prototype.clearHashPreimagesList = function() {
  return this.setHashPreimagesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.chain.SignedSimplexState.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chain.SignedSimplexState.prototype.toObject = function(opt_includeInstance) {
  return proto.chain.SignedSimplexState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chain.SignedSimplexState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chain.SignedSimplexState.toObject = function(includeInstance, msg) {
  var f, obj = {
    simplexState: msg.getSimplexState_asB64(),
    sigsList: msg.getSigsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chain.SignedSimplexState}
 */
proto.chain.SignedSimplexState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chain.SignedSimplexState;
  return proto.chain.SignedSimplexState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chain.SignedSimplexState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chain.SignedSimplexState}
 */
proto.chain.SignedSimplexState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSimplexState(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addSigs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chain.SignedSimplexState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chain.SignedSimplexState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chain.SignedSimplexState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chain.SignedSimplexState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSimplexState_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSigsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes simplex_state = 1;
 * @return {!(string|Uint8Array)}
 */
proto.chain.SignedSimplexState.prototype.getSimplexState = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes simplex_state = 1;
 * This is a type-conversion wrapper around `getSimplexState()`
 * @return {string}
 */
proto.chain.SignedSimplexState.prototype.getSimplexState_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSimplexState()));
};


/**
 * optional bytes simplex_state = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSimplexState()`
 * @return {!Uint8Array}
 */
proto.chain.SignedSimplexState.prototype.getSimplexState_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSimplexState()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.chain.SignedSimplexState} returns this
 */
proto.chain.SignedSimplexState.prototype.setSimplexState = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated bytes sigs = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.chain.SignedSimplexState.prototype.getSigsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes sigs = 2;
 * This is a type-conversion wrapper around `getSigsList()`
 * @return {!Array<string>}
 */
proto.chain.SignedSimplexState.prototype.getSigsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getSigsList()));
};


/**
 * repeated bytes sigs = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSigsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.chain.SignedSimplexState.prototype.getSigsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getSigsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.chain.SignedSimplexState} returns this
 */
proto.chain.SignedSimplexState.prototype.setSigsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.chain.SignedSimplexState} returns this
 */
proto.chain.SignedSimplexState.prototype.addSigs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.chain.SignedSimplexState} returns this
 */
proto.chain.SignedSimplexState.prototype.clearSigsList = function() {
  return this.setSigsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.chain.SignedSimplexStateArray.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chain.SignedSimplexStateArray.prototype.toObject = function(opt_includeInstance) {
  return proto.chain.SignedSimplexStateArray.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chain.SignedSimplexStateArray} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chain.SignedSimplexStateArray.toObject = function(includeInstance, msg) {
  var f, obj = {
    signedSimplexStatesList: jspb.Message.toObjectList(msg.getSignedSimplexStatesList(),
    proto.chain.SignedSimplexState.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chain.SignedSimplexStateArray}
 */
proto.chain.SignedSimplexStateArray.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chain.SignedSimplexStateArray;
  return proto.chain.SignedSimplexStateArray.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chain.SignedSimplexStateArray} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chain.SignedSimplexStateArray}
 */
proto.chain.SignedSimplexStateArray.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.chain.SignedSimplexState;
      reader.readMessage(value,proto.chain.SignedSimplexState.deserializeBinaryFromReader);
      msg.addSignedSimplexStates(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chain.SignedSimplexStateArray.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chain.SignedSimplexStateArray.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chain.SignedSimplexStateArray} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chain.SignedSimplexStateArray.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignedSimplexStatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.chain.SignedSimplexState.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SignedSimplexState signed_simplex_states = 1;
 * @return {!Array<!proto.chain.SignedSimplexState>}
 */
proto.chain.SignedSimplexStateArray.prototype.getSignedSimplexStatesList = function() {
  return /** @type{!Array<!proto.chain.SignedSimplexState>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.chain.SignedSimplexState, 1));
};


/**
 * @param {!Array<!proto.chain.SignedSimplexState>} value
 * @return {!proto.chain.SignedSimplexStateArray} returns this
*/
proto.chain.SignedSimplexStateArray.prototype.setSignedSimplexStatesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.chain.SignedSimplexState=} opt_value
 * @param {number=} opt_index
 * @return {!proto.chain.SignedSimplexState}
 */
proto.chain.SignedSimplexStateArray.prototype.addSignedSimplexStates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.chain.SignedSimplexState, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.chain.SignedSimplexStateArray} returns this
 */
proto.chain.SignedSimplexStateArray.prototype.clearSignedSimplexStatesList = function() {
  return this.setSignedSimplexStatesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.chain.ChannelMigrationRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chain.ChannelMigrationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.chain.ChannelMigrationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chain.ChannelMigrationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chain.ChannelMigrationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelMigrationInfo: msg.getChannelMigrationInfo_asB64(),
    sigsList: msg.getSigsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chain.ChannelMigrationRequest}
 */
proto.chain.ChannelMigrationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chain.ChannelMigrationRequest;
  return proto.chain.ChannelMigrationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chain.ChannelMigrationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chain.ChannelMigrationRequest}
 */
proto.chain.ChannelMigrationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChannelMigrationInfo(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addSigs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chain.ChannelMigrationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chain.ChannelMigrationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chain.ChannelMigrationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chain.ChannelMigrationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelMigrationInfo_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSigsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes channel_migration_info = 1;
 * @return {!(string|Uint8Array)}
 */
proto.chain.ChannelMigrationRequest.prototype.getChannelMigrationInfo = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes channel_migration_info = 1;
 * This is a type-conversion wrapper around `getChannelMigrationInfo()`
 * @return {string}
 */
proto.chain.ChannelMigrationRequest.prototype.getChannelMigrationInfo_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChannelMigrationInfo()));
};


/**
 * optional bytes channel_migration_info = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChannelMigrationInfo()`
 * @return {!Uint8Array}
 */
proto.chain.ChannelMigrationRequest.prototype.getChannelMigrationInfo_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChannelMigrationInfo()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.chain.ChannelMigrationRequest} returns this
 */
proto.chain.ChannelMigrationRequest.prototype.setChannelMigrationInfo = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated bytes sigs = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.chain.ChannelMigrationRequest.prototype.getSigsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes sigs = 2;
 * This is a type-conversion wrapper around `getSigsList()`
 * @return {!Array<string>}
 */
proto.chain.ChannelMigrationRequest.prototype.getSigsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getSigsList()));
};


/**
 * repeated bytes sigs = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSigsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.chain.ChannelMigrationRequest.prototype.getSigsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getSigsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.chain.ChannelMigrationRequest} returns this
 */
proto.chain.ChannelMigrationRequest.prototype.setSigsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.chain.ChannelMigrationRequest} returns this
 */
proto.chain.ChannelMigrationRequest.prototype.addSigs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.chain.ChannelMigrationRequest} returns this
 */
proto.chain.ChannelMigrationRequest.prototype.clearSigsList = function() {
  return this.setSigsList([]);
};


goog.object.extend(exports, proto.chain);
