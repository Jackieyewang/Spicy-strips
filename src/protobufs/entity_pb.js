// source: entity.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_descriptor_pb = require('google-protobuf/google/protobuf/descriptor_pb.js');
goog.object.extend(proto, google_protobuf_descriptor_pb);
goog.exportSymbol('proto.entity.AccountAmtPair', null, global);
goog.exportSymbol('proto.entity.ChannelMigrationInfo', null, global);
goog.exportSymbol('proto.entity.CondPayResult', null, global);
goog.exportSymbol('proto.entity.Condition', null, global);
goog.exportSymbol('proto.entity.ConditionType', null, global);
goog.exportSymbol('proto.entity.ConditionalPay', null, global);
goog.exportSymbol('proto.entity.CooperativeSettleInfo', null, global);
goog.exportSymbol('proto.entity.CooperativeWithdrawInfo', null, global);
goog.exportSymbol('proto.entity.PayIdList', null, global);
goog.exportSymbol('proto.entity.PaymentChannelInitializer', null, global);
goog.exportSymbol('proto.entity.SimplexPaymentChannel', null, global);
goog.exportSymbol('proto.entity.TokenDistribution', null, global);
goog.exportSymbol('proto.entity.TokenInfo', null, global);
goog.exportSymbol('proto.entity.TokenTransfer', null, global);
goog.exportSymbol('proto.entity.TokenType', null, global);
goog.exportSymbol('proto.entity.TransferFunction', null, global);
goog.exportSymbol('proto.entity.TransferFunctionType', null, global);
goog.exportSymbol('proto.entity.VouchedCondPayResult', null, global);
goog.exportSymbol('proto.entity.soltype', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.entity.AccountAmtPair = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.entity.AccountAmtPair, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.entity.AccountAmtPair.displayName = 'proto.entity.AccountAmtPair';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.entity.TokenInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.entity.TokenInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.entity.TokenInfo.displayName = 'proto.entity.TokenInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.entity.TokenDistribution = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.entity.TokenDistribution.repeatedFields_, null);
};
goog.inherits(proto.entity.TokenDistribution, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.entity.TokenDistribution.displayName = 'proto.entity.TokenDistribution';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.entity.TokenTransfer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.entity.TokenTransfer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.entity.TokenTransfer.displayName = 'proto.entity.TokenTransfer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.entity.SimplexPaymentChannel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.entity.SimplexPaymentChannel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.entity.SimplexPaymentChannel.displayName = 'proto.entity.SimplexPaymentChannel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.entity.PayIdList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.entity.PayIdList.repeatedFields_, null);
};
goog.inherits(proto.entity.PayIdList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.entity.PayIdList.displayName = 'proto.entity.PayIdList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.entity.TransferFunction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.entity.TransferFunction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.entity.TransferFunction.displayName = 'proto.entity.TransferFunction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.entity.ConditionalPay = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.entity.ConditionalPay.repeatedFields_, null);
};
goog.inherits(proto.entity.ConditionalPay, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.entity.ConditionalPay.displayName = 'proto.entity.ConditionalPay';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.entity.CondPayResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.entity.CondPayResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.entity.CondPayResult.displayName = 'proto.entity.CondPayResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.entity.VouchedCondPayResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.entity.VouchedCondPayResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.entity.VouchedCondPayResult.displayName = 'proto.entity.VouchedCondPayResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.entity.Condition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.entity.Condition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.entity.Condition.displayName = 'proto.entity.Condition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.entity.CooperativeWithdrawInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.entity.CooperativeWithdrawInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.entity.CooperativeWithdrawInfo.displayName = 'proto.entity.CooperativeWithdrawInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.entity.PaymentChannelInitializer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.entity.PaymentChannelInitializer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.entity.PaymentChannelInitializer.displayName = 'proto.entity.PaymentChannelInitializer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.entity.CooperativeSettleInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.entity.CooperativeSettleInfo.repeatedFields_, null);
};
goog.inherits(proto.entity.CooperativeSettleInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.entity.CooperativeSettleInfo.displayName = 'proto.entity.CooperativeSettleInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.entity.ChannelMigrationInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.entity.ChannelMigrationInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.entity.ChannelMigrationInfo.displayName = 'proto.entity.ChannelMigrationInfo';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.entity.AccountAmtPair.prototype.toObject = function(opt_includeInstance) {
  return proto.entity.AccountAmtPair.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.entity.AccountAmtPair} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.entity.AccountAmtPair.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: msg.getAccount_asB64(),
    amt: msg.getAmt_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.entity.AccountAmtPair}
 */
proto.entity.AccountAmtPair.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.entity.AccountAmtPair;
  return proto.entity.AccountAmtPair.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.entity.AccountAmtPair} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.entity.AccountAmtPair}
 */
proto.entity.AccountAmtPair.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAccount(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAmt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.entity.AccountAmtPair.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.entity.AccountAmtPair.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.entity.AccountAmtPair} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.entity.AccountAmtPair.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccount_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAmt_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes account = 1;
 * @return {!(string|Uint8Array)}
 */
proto.entity.AccountAmtPair.prototype.getAccount = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes account = 1;
 * This is a type-conversion wrapper around `getAccount()`
 * @return {string}
 */
proto.entity.AccountAmtPair.prototype.getAccount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAccount()));
};


/**
 * optional bytes account = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAccount()`
 * @return {!Uint8Array}
 */
proto.entity.AccountAmtPair.prototype.getAccount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAccount()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.entity.AccountAmtPair} returns this
 */
proto.entity.AccountAmtPair.prototype.setAccount = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes amt = 2;
 * @return {!(string|Uint8Array)}
 */
proto.entity.AccountAmtPair.prototype.getAmt = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes amt = 2;
 * This is a type-conversion wrapper around `getAmt()`
 * @return {string}
 */
proto.entity.AccountAmtPair.prototype.getAmt_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAmt()));
};


/**
 * optional bytes amt = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAmt()`
 * @return {!Uint8Array}
 */
proto.entity.AccountAmtPair.prototype.getAmt_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAmt()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.entity.AccountAmtPair} returns this
 */
proto.entity.AccountAmtPair.prototype.setAmt = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.entity.TokenInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.entity.TokenInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.entity.TokenInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.entity.TokenInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    tokenType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tokenAddress: msg.getTokenAddress_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.entity.TokenInfo}
 */
proto.entity.TokenInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.entity.TokenInfo;
  return proto.entity.TokenInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.entity.TokenInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.entity.TokenInfo}
 */
proto.entity.TokenInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.entity.TokenType} */ (reader.readEnum());
      msg.setTokenType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTokenAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.entity.TokenInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.entity.TokenInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.entity.TokenInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.entity.TokenInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTokenType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTokenAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional TokenType token_type = 1;
 * @return {!proto.entity.TokenType}
 */
proto.entity.TokenInfo.prototype.getTokenType = function() {
  return /** @type {!proto.entity.TokenType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.entity.TokenType} value
 * @return {!proto.entity.TokenInfo} returns this
 */
proto.entity.TokenInfo.prototype.setTokenType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes token_address = 2;
 * @return {!(string|Uint8Array)}
 */
proto.entity.TokenInfo.prototype.getTokenAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes token_address = 2;
 * This is a type-conversion wrapper around `getTokenAddress()`
 * @return {string}
 */
proto.entity.TokenInfo.prototype.getTokenAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTokenAddress()));
};


/**
 * optional bytes token_address = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTokenAddress()`
 * @return {!Uint8Array}
 */
proto.entity.TokenInfo.prototype.getTokenAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTokenAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.entity.TokenInfo} returns this
 */
proto.entity.TokenInfo.prototype.setTokenAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.entity.TokenDistribution.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.entity.TokenDistribution.prototype.toObject = function(opt_includeInstance) {
  return proto.entity.TokenDistribution.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.entity.TokenDistribution} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.entity.TokenDistribution.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: (f = msg.getToken()) && proto.entity.TokenInfo.toObject(includeInstance, f),
    distributionList: jspb.Message.toObjectList(msg.getDistributionList(),
    proto.entity.AccountAmtPair.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.entity.TokenDistribution}
 */
proto.entity.TokenDistribution.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.entity.TokenDistribution;
  return proto.entity.TokenDistribution.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.entity.TokenDistribution} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.entity.TokenDistribution}
 */
proto.entity.TokenDistribution.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.entity.TokenInfo;
      reader.readMessage(value,proto.entity.TokenInfo.deserializeBinaryFromReader);
      msg.setToken(value);
      break;
    case 2:
      var value = new proto.entity.AccountAmtPair;
      reader.readMessage(value,proto.entity.AccountAmtPair.deserializeBinaryFromReader);
      msg.addDistribution(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.entity.TokenDistribution.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.entity.TokenDistribution.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.entity.TokenDistribution} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.entity.TokenDistribution.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.entity.TokenInfo.serializeBinaryToWriter
    );
  }
  f = message.getDistributionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.entity.AccountAmtPair.serializeBinaryToWriter
    );
  }
};


/**
 * optional TokenInfo token = 1;
 * @return {?proto.entity.TokenInfo}
 */
proto.entity.TokenDistribution.prototype.getToken = function() {
  return /** @type{?proto.entity.TokenInfo} */ (
    jspb.Message.getWrapperField(this, proto.entity.TokenInfo, 1));
};


/**
 * @param {?proto.entity.TokenInfo|undefined} value
 * @return {!proto.entity.TokenDistribution} returns this
*/
proto.entity.TokenDistribution.prototype.setToken = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.entity.TokenDistribution} returns this
 */
proto.entity.TokenDistribution.prototype.clearToken = function() {
  return this.setToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.entity.TokenDistribution.prototype.hasToken = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated AccountAmtPair distribution = 2;
 * @return {!Array<!proto.entity.AccountAmtPair>}
 */
proto.entity.TokenDistribution.prototype.getDistributionList = function() {
  return /** @type{!Array<!proto.entity.AccountAmtPair>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.entity.AccountAmtPair, 2));
};


/**
 * @param {!Array<!proto.entity.AccountAmtPair>} value
 * @return {!proto.entity.TokenDistribution} returns this
*/
proto.entity.TokenDistribution.prototype.setDistributionList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.entity.AccountAmtPair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.entity.AccountAmtPair}
 */
proto.entity.TokenDistribution.prototype.addDistribution = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.entity.AccountAmtPair, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.entity.TokenDistribution} returns this
 */
proto.entity.TokenDistribution.prototype.clearDistributionList = function() {
  return this.setDistributionList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.entity.TokenTransfer.prototype.toObject = function(opt_includeInstance) {
  return proto.entity.TokenTransfer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.entity.TokenTransfer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.entity.TokenTransfer.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: (f = msg.getToken()) && proto.entity.TokenInfo.toObject(includeInstance, f),
    receiver: (f = msg.getReceiver()) && proto.entity.AccountAmtPair.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.entity.TokenTransfer}
 */
proto.entity.TokenTransfer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.entity.TokenTransfer;
  return proto.entity.TokenTransfer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.entity.TokenTransfer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.entity.TokenTransfer}
 */
proto.entity.TokenTransfer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.entity.TokenInfo;
      reader.readMessage(value,proto.entity.TokenInfo.deserializeBinaryFromReader);
      msg.setToken(value);
      break;
    case 2:
      var value = new proto.entity.AccountAmtPair;
      reader.readMessage(value,proto.entity.AccountAmtPair.deserializeBinaryFromReader);
      msg.setReceiver(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.entity.TokenTransfer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.entity.TokenTransfer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.entity.TokenTransfer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.entity.TokenTransfer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.entity.TokenInfo.serializeBinaryToWriter
    );
  }
  f = message.getReceiver();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.entity.AccountAmtPair.serializeBinaryToWriter
    );
  }
};


/**
 * optional TokenInfo token = 1;
 * @return {?proto.entity.TokenInfo}
 */
proto.entity.TokenTransfer.prototype.getToken = function() {
  return /** @type{?proto.entity.TokenInfo} */ (
    jspb.Message.getWrapperField(this, proto.entity.TokenInfo, 1));
};


/**
 * @param {?proto.entity.TokenInfo|undefined} value
 * @return {!proto.entity.TokenTransfer} returns this
*/
proto.entity.TokenTransfer.prototype.setToken = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.entity.TokenTransfer} returns this
 */
proto.entity.TokenTransfer.prototype.clearToken = function() {
  return this.setToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.entity.TokenTransfer.prototype.hasToken = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AccountAmtPair receiver = 2;
 * @return {?proto.entity.AccountAmtPair}
 */
proto.entity.TokenTransfer.prototype.getReceiver = function() {
  return /** @type{?proto.entity.AccountAmtPair} */ (
    jspb.Message.getWrapperField(this, proto.entity.AccountAmtPair, 2));
};


/**
 * @param {?proto.entity.AccountAmtPair|undefined} value
 * @return {!proto.entity.TokenTransfer} returns this
*/
proto.entity.TokenTransfer.prototype.setReceiver = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.entity.TokenTransfer} returns this
 */
proto.entity.TokenTransfer.prototype.clearReceiver = function() {
  return this.setReceiver(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.entity.TokenTransfer.prototype.hasReceiver = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.entity.SimplexPaymentChannel.prototype.toObject = function(opt_includeInstance) {
  return proto.entity.SimplexPaymentChannel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.entity.SimplexPaymentChannel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.entity.SimplexPaymentChannel.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelId: msg.getChannelId_asB64(),
    peerFrom: msg.getPeerFrom_asB64(),
    seqNum: jspb.Message.getFieldWithDefault(msg, 3, 0),
    transferToPeer: (f = msg.getTransferToPeer()) && proto.entity.TokenTransfer.toObject(includeInstance, f),
    pendingPayIds: (f = msg.getPendingPayIds()) && proto.entity.PayIdList.toObject(includeInstance, f),
    lastPayResolveDeadline: jspb.Message.getFieldWithDefault(msg, 6, 0),
    totalPendingAmount: msg.getTotalPendingAmount_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.entity.SimplexPaymentChannel}
 */
proto.entity.SimplexPaymentChannel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.entity.SimplexPaymentChannel;
  return proto.entity.SimplexPaymentChannel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.entity.SimplexPaymentChannel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.entity.SimplexPaymentChannel}
 */
proto.entity.SimplexPaymentChannel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChannelId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPeerFrom(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSeqNum(value);
      break;
    case 4:
      var value = new proto.entity.TokenTransfer;
      reader.readMessage(value,proto.entity.TokenTransfer.deserializeBinaryFromReader);
      msg.setTransferToPeer(value);
      break;
    case 5:
      var value = new proto.entity.PayIdList;
      reader.readMessage(value,proto.entity.PayIdList.deserializeBinaryFromReader);
      msg.setPendingPayIds(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLastPayResolveDeadline(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTotalPendingAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.entity.SimplexPaymentChannel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.entity.SimplexPaymentChannel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.entity.SimplexPaymentChannel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.entity.SimplexPaymentChannel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPeerFrom_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getSeqNum();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getTransferToPeer();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.entity.TokenTransfer.serializeBinaryToWriter
    );
  }
  f = message.getPendingPayIds();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.entity.PayIdList.serializeBinaryToWriter
    );
  }
  f = message.getLastPayResolveDeadline();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getTotalPendingAmount_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
};


/**
 * optional bytes channel_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.entity.SimplexPaymentChannel.prototype.getChannelId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes channel_id = 1;
 * This is a type-conversion wrapper around `getChannelId()`
 * @return {string}
 */
proto.entity.SimplexPaymentChannel.prototype.getChannelId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChannelId()));
};


/**
 * optional bytes channel_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChannelId()`
 * @return {!Uint8Array}
 */
proto.entity.SimplexPaymentChannel.prototype.getChannelId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChannelId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.entity.SimplexPaymentChannel} returns this
 */
proto.entity.SimplexPaymentChannel.prototype.setChannelId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes peer_from = 2;
 * @return {!(string|Uint8Array)}
 */
proto.entity.SimplexPaymentChannel.prototype.getPeerFrom = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes peer_from = 2;
 * This is a type-conversion wrapper around `getPeerFrom()`
 * @return {string}
 */
proto.entity.SimplexPaymentChannel.prototype.getPeerFrom_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPeerFrom()));
};


/**
 * optional bytes peer_from = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPeerFrom()`
 * @return {!Uint8Array}
 */
proto.entity.SimplexPaymentChannel.prototype.getPeerFrom_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPeerFrom()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.entity.SimplexPaymentChannel} returns this
 */
proto.entity.SimplexPaymentChannel.prototype.setPeerFrom = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint64 seq_num = 3;
 * @return {number}
 */
proto.entity.SimplexPaymentChannel.prototype.getSeqNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.entity.SimplexPaymentChannel} returns this
 */
proto.entity.SimplexPaymentChannel.prototype.setSeqNum = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional TokenTransfer transfer_to_peer = 4;
 * @return {?proto.entity.TokenTransfer}
 */
proto.entity.SimplexPaymentChannel.prototype.getTransferToPeer = function() {
  return /** @type{?proto.entity.TokenTransfer} */ (
    jspb.Message.getWrapperField(this, proto.entity.TokenTransfer, 4));
};


/**
 * @param {?proto.entity.TokenTransfer|undefined} value
 * @return {!proto.entity.SimplexPaymentChannel} returns this
*/
proto.entity.SimplexPaymentChannel.prototype.setTransferToPeer = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.entity.SimplexPaymentChannel} returns this
 */
proto.entity.SimplexPaymentChannel.prototype.clearTransferToPeer = function() {
  return this.setTransferToPeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.entity.SimplexPaymentChannel.prototype.hasTransferToPeer = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional PayIdList pending_pay_ids = 5;
 * @return {?proto.entity.PayIdList}
 */
proto.entity.SimplexPaymentChannel.prototype.getPendingPayIds = function() {
  return /** @type{?proto.entity.PayIdList} */ (
    jspb.Message.getWrapperField(this, proto.entity.PayIdList, 5));
};


/**
 * @param {?proto.entity.PayIdList|undefined} value
 * @return {!proto.entity.SimplexPaymentChannel} returns this
*/
proto.entity.SimplexPaymentChannel.prototype.setPendingPayIds = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.entity.SimplexPaymentChannel} returns this
 */
proto.entity.SimplexPaymentChannel.prototype.clearPendingPayIds = function() {
  return this.setPendingPayIds(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.entity.SimplexPaymentChannel.prototype.hasPendingPayIds = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint64 last_pay_resolve_deadline = 6;
 * @return {number}
 */
proto.entity.SimplexPaymentChannel.prototype.getLastPayResolveDeadline = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.entity.SimplexPaymentChannel} returns this
 */
proto.entity.SimplexPaymentChannel.prototype.setLastPayResolveDeadline = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bytes total_pending_amount = 7;
 * @return {!(string|Uint8Array)}
 */
proto.entity.SimplexPaymentChannel.prototype.getTotalPendingAmount = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes total_pending_amount = 7;
 * This is a type-conversion wrapper around `getTotalPendingAmount()`
 * @return {string}
 */
proto.entity.SimplexPaymentChannel.prototype.getTotalPendingAmount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTotalPendingAmount()));
};


/**
 * optional bytes total_pending_amount = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTotalPendingAmount()`
 * @return {!Uint8Array}
 */
proto.entity.SimplexPaymentChannel.prototype.getTotalPendingAmount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTotalPendingAmount()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.entity.SimplexPaymentChannel} returns this
 */
proto.entity.SimplexPaymentChannel.prototype.setTotalPendingAmount = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.entity.PayIdList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.entity.PayIdList.prototype.toObject = function(opt_includeInstance) {
  return proto.entity.PayIdList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.entity.PayIdList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.entity.PayIdList.toObject = function(includeInstance, msg) {
  var f, obj = {
    payIdsList: msg.getPayIdsList_asB64(),
    nextListHash: msg.getNextListHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.entity.PayIdList}
 */
proto.entity.PayIdList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.entity.PayIdList;
  return proto.entity.PayIdList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.entity.PayIdList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.entity.PayIdList}
 */
proto.entity.PayIdList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addPayIds(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNextListHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.entity.PayIdList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.entity.PayIdList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.entity.PayIdList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.entity.PayIdList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayIdsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
  f = message.getNextListHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * repeated bytes pay_ids = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.entity.PayIdList.prototype.getPayIdsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes pay_ids = 1;
 * This is a type-conversion wrapper around `getPayIdsList()`
 * @return {!Array<string>}
 */
proto.entity.PayIdList.prototype.getPayIdsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getPayIdsList()));
};


/**
 * repeated bytes pay_ids = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayIdsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.entity.PayIdList.prototype.getPayIdsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getPayIdsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.entity.PayIdList} returns this
 */
proto.entity.PayIdList.prototype.setPayIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.entity.PayIdList} returns this
 */
proto.entity.PayIdList.prototype.addPayIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.entity.PayIdList} returns this
 */
proto.entity.PayIdList.prototype.clearPayIdsList = function() {
  return this.setPayIdsList([]);
};


/**
 * optional bytes next_list_hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.entity.PayIdList.prototype.getNextListHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes next_list_hash = 2;
 * This is a type-conversion wrapper around `getNextListHash()`
 * @return {string}
 */
proto.entity.PayIdList.prototype.getNextListHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNextListHash()));
};


/**
 * optional bytes next_list_hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNextListHash()`
 * @return {!Uint8Array}
 */
proto.entity.PayIdList.prototype.getNextListHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNextListHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.entity.PayIdList} returns this
 */
proto.entity.PayIdList.prototype.setNextListHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.entity.TransferFunction.prototype.toObject = function(opt_includeInstance) {
  return proto.entity.TransferFunction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.entity.TransferFunction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.entity.TransferFunction.toObject = function(includeInstance, msg) {
  var f, obj = {
    logicType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    maxTransfer: (f = msg.getMaxTransfer()) && proto.entity.TokenTransfer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.entity.TransferFunction}
 */
proto.entity.TransferFunction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.entity.TransferFunction;
  return proto.entity.TransferFunction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.entity.TransferFunction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.entity.TransferFunction}
 */
proto.entity.TransferFunction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.entity.TransferFunctionType} */ (reader.readEnum());
      msg.setLogicType(value);
      break;
    case 2:
      var value = new proto.entity.TokenTransfer;
      reader.readMessage(value,proto.entity.TokenTransfer.deserializeBinaryFromReader);
      msg.setMaxTransfer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.entity.TransferFunction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.entity.TransferFunction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.entity.TransferFunction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.entity.TransferFunction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLogicType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMaxTransfer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.entity.TokenTransfer.serializeBinaryToWriter
    );
  }
};


/**
 * optional TransferFunctionType logic_type = 1;
 * @return {!proto.entity.TransferFunctionType}
 */
proto.entity.TransferFunction.prototype.getLogicType = function() {
  return /** @type {!proto.entity.TransferFunctionType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.entity.TransferFunctionType} value
 * @return {!proto.entity.TransferFunction} returns this
 */
proto.entity.TransferFunction.prototype.setLogicType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional TokenTransfer max_transfer = 2;
 * @return {?proto.entity.TokenTransfer}
 */
proto.entity.TransferFunction.prototype.getMaxTransfer = function() {
  return /** @type{?proto.entity.TokenTransfer} */ (
    jspb.Message.getWrapperField(this, proto.entity.TokenTransfer, 2));
};


/**
 * @param {?proto.entity.TokenTransfer|undefined} value
 * @return {!proto.entity.TransferFunction} returns this
*/
proto.entity.TransferFunction.prototype.setMaxTransfer = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.entity.TransferFunction} returns this
 */
proto.entity.TransferFunction.prototype.clearMaxTransfer = function() {
  return this.setMaxTransfer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.entity.TransferFunction.prototype.hasMaxTransfer = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.entity.ConditionalPay.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.entity.ConditionalPay.prototype.toObject = function(opt_includeInstance) {
  return proto.entity.ConditionalPay.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.entity.ConditionalPay} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.entity.ConditionalPay.toObject = function(includeInstance, msg) {
  var f, obj = {
    payTimestamp: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    src: msg.getSrc_asB64(),
    dest: msg.getDest_asB64(),
    conditionsList: jspb.Message.toObjectList(msg.getConditionsList(),
    proto.entity.Condition.toObject, includeInstance),
    transferFunc: (f = msg.getTransferFunc()) && proto.entity.TransferFunction.toObject(includeInstance, f),
    resolveDeadline: jspb.Message.getFieldWithDefault(msg, 6, 0),
    resolveTimeout: jspb.Message.getFieldWithDefault(msg, 7, 0),
    payResolver: msg.getPayResolver_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.entity.ConditionalPay}
 */
proto.entity.ConditionalPay.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.entity.ConditionalPay;
  return proto.entity.ConditionalPay.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.entity.ConditionalPay} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.entity.ConditionalPay}
 */
proto.entity.ConditionalPay.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setPayTimestamp(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSrc(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDest(value);
      break;
    case 4:
      var value = new proto.entity.Condition;
      reader.readMessage(value,proto.entity.Condition.deserializeBinaryFromReader);
      msg.addConditions(value);
      break;
    case 5:
      var value = new proto.entity.TransferFunction;
      reader.readMessage(value,proto.entity.TransferFunction.deserializeBinaryFromReader);
      msg.setTransferFunc(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setResolveDeadline(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setResolveTimeout(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayResolver(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.entity.ConditionalPay.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.entity.ConditionalPay.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.entity.ConditionalPay} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.entity.ConditionalPay.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayTimestamp();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = message.getSrc_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getDest_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getConditionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.entity.Condition.serializeBinaryToWriter
    );
  }
  f = message.getTransferFunc();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.entity.TransferFunction.serializeBinaryToWriter
    );
  }
  f = message.getResolveDeadline();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getResolveTimeout();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getPayResolver_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
};


/**
 * optional uint64 pay_timestamp = 1;
 * @return {string}
 */
proto.entity.ConditionalPay.prototype.getPayTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.entity.ConditionalPay} returns this
 */
proto.entity.ConditionalPay.prototype.setPayTimestamp = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional bytes src = 2;
 * @return {!(string|Uint8Array)}
 */
proto.entity.ConditionalPay.prototype.getSrc = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes src = 2;
 * This is a type-conversion wrapper around `getSrc()`
 * @return {string}
 */
proto.entity.ConditionalPay.prototype.getSrc_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSrc()));
};


/**
 * optional bytes src = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSrc()`
 * @return {!Uint8Array}
 */
proto.entity.ConditionalPay.prototype.getSrc_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSrc()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.entity.ConditionalPay} returns this
 */
proto.entity.ConditionalPay.prototype.setSrc = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes dest = 3;
 * @return {!(string|Uint8Array)}
 */
proto.entity.ConditionalPay.prototype.getDest = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes dest = 3;
 * This is a type-conversion wrapper around `getDest()`
 * @return {string}
 */
proto.entity.ConditionalPay.prototype.getDest_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDest()));
};


/**
 * optional bytes dest = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDest()`
 * @return {!Uint8Array}
 */
proto.entity.ConditionalPay.prototype.getDest_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDest()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.entity.ConditionalPay} returns this
 */
proto.entity.ConditionalPay.prototype.setDest = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * repeated Condition conditions = 4;
 * @return {!Array<!proto.entity.Condition>}
 */
proto.entity.ConditionalPay.prototype.getConditionsList = function() {
  return /** @type{!Array<!proto.entity.Condition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.entity.Condition, 4));
};


/**
 * @param {!Array<!proto.entity.Condition>} value
 * @return {!proto.entity.ConditionalPay} returns this
*/
proto.entity.ConditionalPay.prototype.setConditionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.entity.Condition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.entity.Condition}
 */
proto.entity.ConditionalPay.prototype.addConditions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.entity.Condition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.entity.ConditionalPay} returns this
 */
proto.entity.ConditionalPay.prototype.clearConditionsList = function() {
  return this.setConditionsList([]);
};


/**
 * optional TransferFunction transfer_func = 5;
 * @return {?proto.entity.TransferFunction}
 */
proto.entity.ConditionalPay.prototype.getTransferFunc = function() {
  return /** @type{?proto.entity.TransferFunction} */ (
    jspb.Message.getWrapperField(this, proto.entity.TransferFunction, 5));
};


/**
 * @param {?proto.entity.TransferFunction|undefined} value
 * @return {!proto.entity.ConditionalPay} returns this
*/
proto.entity.ConditionalPay.prototype.setTransferFunc = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.entity.ConditionalPay} returns this
 */
proto.entity.ConditionalPay.prototype.clearTransferFunc = function() {
  return this.setTransferFunc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.entity.ConditionalPay.prototype.hasTransferFunc = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint64 resolve_deadline = 6;
 * @return {number}
 */
proto.entity.ConditionalPay.prototype.getResolveDeadline = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.entity.ConditionalPay} returns this
 */
proto.entity.ConditionalPay.prototype.setResolveDeadline = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 resolve_timeout = 7;
 * @return {number}
 */
proto.entity.ConditionalPay.prototype.getResolveTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.entity.ConditionalPay} returns this
 */
proto.entity.ConditionalPay.prototype.setResolveTimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bytes pay_resolver = 8;
 * @return {!(string|Uint8Array)}
 */
proto.entity.ConditionalPay.prototype.getPayResolver = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes pay_resolver = 8;
 * This is a type-conversion wrapper around `getPayResolver()`
 * @return {string}
 */
proto.entity.ConditionalPay.prototype.getPayResolver_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayResolver()));
};


/**
 * optional bytes pay_resolver = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayResolver()`
 * @return {!Uint8Array}
 */
proto.entity.ConditionalPay.prototype.getPayResolver_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayResolver()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.entity.ConditionalPay} returns this
 */
proto.entity.ConditionalPay.prototype.setPayResolver = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.entity.CondPayResult.prototype.toObject = function(opt_includeInstance) {
  return proto.entity.CondPayResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.entity.CondPayResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.entity.CondPayResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    condPay: msg.getCondPay_asB64(),
    amount: msg.getAmount_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.entity.CondPayResult}
 */
proto.entity.CondPayResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.entity.CondPayResult;
  return proto.entity.CondPayResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.entity.CondPayResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.entity.CondPayResult}
 */
proto.entity.CondPayResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCondPay(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.entity.CondPayResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.entity.CondPayResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.entity.CondPayResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.entity.CondPayResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCondPay_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAmount_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes cond_pay = 1;
 * @return {!(string|Uint8Array)}
 */
proto.entity.CondPayResult.prototype.getCondPay = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes cond_pay = 1;
 * This is a type-conversion wrapper around `getCondPay()`
 * @return {string}
 */
proto.entity.CondPayResult.prototype.getCondPay_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCondPay()));
};


/**
 * optional bytes cond_pay = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCondPay()`
 * @return {!Uint8Array}
 */
proto.entity.CondPayResult.prototype.getCondPay_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCondPay()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.entity.CondPayResult} returns this
 */
proto.entity.CondPayResult.prototype.setCondPay = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes amount = 2;
 * @return {!(string|Uint8Array)}
 */
proto.entity.CondPayResult.prototype.getAmount = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes amount = 2;
 * This is a type-conversion wrapper around `getAmount()`
 * @return {string}
 */
proto.entity.CondPayResult.prototype.getAmount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAmount()));
};


/**
 * optional bytes amount = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAmount()`
 * @return {!Uint8Array}
 */
proto.entity.CondPayResult.prototype.getAmount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAmount()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.entity.CondPayResult} returns this
 */
proto.entity.CondPayResult.prototype.setAmount = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.entity.VouchedCondPayResult.prototype.toObject = function(opt_includeInstance) {
  return proto.entity.VouchedCondPayResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.entity.VouchedCondPayResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.entity.VouchedCondPayResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    condPayResult: msg.getCondPayResult_asB64(),
    sigOfSrc: msg.getSigOfSrc_asB64(),
    sigOfDest: msg.getSigOfDest_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.entity.VouchedCondPayResult}
 */
proto.entity.VouchedCondPayResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.entity.VouchedCondPayResult;
  return proto.entity.VouchedCondPayResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.entity.VouchedCondPayResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.entity.VouchedCondPayResult}
 */
proto.entity.VouchedCondPayResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCondPayResult(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSigOfSrc(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSigOfDest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.entity.VouchedCondPayResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.entity.VouchedCondPayResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.entity.VouchedCondPayResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.entity.VouchedCondPayResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCondPayResult_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSigOfSrc_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getSigOfDest_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes cond_pay_result = 1;
 * @return {!(string|Uint8Array)}
 */
proto.entity.VouchedCondPayResult.prototype.getCondPayResult = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes cond_pay_result = 1;
 * This is a type-conversion wrapper around `getCondPayResult()`
 * @return {string}
 */
proto.entity.VouchedCondPayResult.prototype.getCondPayResult_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCondPayResult()));
};


/**
 * optional bytes cond_pay_result = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCondPayResult()`
 * @return {!Uint8Array}
 */
proto.entity.VouchedCondPayResult.prototype.getCondPayResult_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCondPayResult()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.entity.VouchedCondPayResult} returns this
 */
proto.entity.VouchedCondPayResult.prototype.setCondPayResult = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes sig_of_src = 2;
 * @return {!(string|Uint8Array)}
 */
proto.entity.VouchedCondPayResult.prototype.getSigOfSrc = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes sig_of_src = 2;
 * This is a type-conversion wrapper around `getSigOfSrc()`
 * @return {string}
 */
proto.entity.VouchedCondPayResult.prototype.getSigOfSrc_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSigOfSrc()));
};


/**
 * optional bytes sig_of_src = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSigOfSrc()`
 * @return {!Uint8Array}
 */
proto.entity.VouchedCondPayResult.prototype.getSigOfSrc_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSigOfSrc()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.entity.VouchedCondPayResult} returns this
 */
proto.entity.VouchedCondPayResult.prototype.setSigOfSrc = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes sig_of_dest = 3;
 * @return {!(string|Uint8Array)}
 */
proto.entity.VouchedCondPayResult.prototype.getSigOfDest = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes sig_of_dest = 3;
 * This is a type-conversion wrapper around `getSigOfDest()`
 * @return {string}
 */
proto.entity.VouchedCondPayResult.prototype.getSigOfDest_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSigOfDest()));
};


/**
 * optional bytes sig_of_dest = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSigOfDest()`
 * @return {!Uint8Array}
 */
proto.entity.VouchedCondPayResult.prototype.getSigOfDest_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSigOfDest()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.entity.VouchedCondPayResult} returns this
 */
proto.entity.VouchedCondPayResult.prototype.setSigOfDest = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.entity.Condition.prototype.toObject = function(opt_includeInstance) {
  return proto.entity.Condition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.entity.Condition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.entity.Condition.toObject = function(includeInstance, msg) {
  var f, obj = {
    conditionType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    hashLock: msg.getHashLock_asB64(),
    deployedContractAddress: msg.getDeployedContractAddress_asB64(),
    virtualContractAddress: msg.getVirtualContractAddress_asB64(),
    argsQueryFinalization: msg.getArgsQueryFinalization_asB64(),
    argsQueryOutcome: msg.getArgsQueryOutcome_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.entity.Condition}
 */
proto.entity.Condition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.entity.Condition;
  return proto.entity.Condition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.entity.Condition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.entity.Condition}
 */
proto.entity.Condition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.entity.ConditionType} */ (reader.readEnum());
      msg.setConditionType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHashLock(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDeployedContractAddress(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setVirtualContractAddress(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setArgsQueryFinalization(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setArgsQueryOutcome(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.entity.Condition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.entity.Condition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.entity.Condition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.entity.Condition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConditionType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getHashLock_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getDeployedContractAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getVirtualContractAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getArgsQueryFinalization_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getArgsQueryOutcome_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
};


/**
 * optional ConditionType condition_type = 1;
 * @return {!proto.entity.ConditionType}
 */
proto.entity.Condition.prototype.getConditionType = function() {
  return /** @type {!proto.entity.ConditionType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.entity.ConditionType} value
 * @return {!proto.entity.Condition} returns this
 */
proto.entity.Condition.prototype.setConditionType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes hash_lock = 2;
 * @return {!(string|Uint8Array)}
 */
proto.entity.Condition.prototype.getHashLock = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes hash_lock = 2;
 * This is a type-conversion wrapper around `getHashLock()`
 * @return {string}
 */
proto.entity.Condition.prototype.getHashLock_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHashLock()));
};


/**
 * optional bytes hash_lock = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHashLock()`
 * @return {!Uint8Array}
 */
proto.entity.Condition.prototype.getHashLock_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHashLock()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.entity.Condition} returns this
 */
proto.entity.Condition.prototype.setHashLock = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes deployed_contract_address = 3;
 * @return {!(string|Uint8Array)}
 */
proto.entity.Condition.prototype.getDeployedContractAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes deployed_contract_address = 3;
 * This is a type-conversion wrapper around `getDeployedContractAddress()`
 * @return {string}
 */
proto.entity.Condition.prototype.getDeployedContractAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDeployedContractAddress()));
};


/**
 * optional bytes deployed_contract_address = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDeployedContractAddress()`
 * @return {!Uint8Array}
 */
proto.entity.Condition.prototype.getDeployedContractAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDeployedContractAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.entity.Condition} returns this
 */
proto.entity.Condition.prototype.setDeployedContractAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes virtual_contract_address = 4;
 * @return {!(string|Uint8Array)}
 */
proto.entity.Condition.prototype.getVirtualContractAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes virtual_contract_address = 4;
 * This is a type-conversion wrapper around `getVirtualContractAddress()`
 * @return {string}
 */
proto.entity.Condition.prototype.getVirtualContractAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getVirtualContractAddress()));
};


/**
 * optional bytes virtual_contract_address = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getVirtualContractAddress()`
 * @return {!Uint8Array}
 */
proto.entity.Condition.prototype.getVirtualContractAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getVirtualContractAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.entity.Condition} returns this
 */
proto.entity.Condition.prototype.setVirtualContractAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes args_query_finalization = 5;
 * @return {!(string|Uint8Array)}
 */
proto.entity.Condition.prototype.getArgsQueryFinalization = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes args_query_finalization = 5;
 * This is a type-conversion wrapper around `getArgsQueryFinalization()`
 * @return {string}
 */
proto.entity.Condition.prototype.getArgsQueryFinalization_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getArgsQueryFinalization()));
};


/**
 * optional bytes args_query_finalization = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getArgsQueryFinalization()`
 * @return {!Uint8Array}
 */
proto.entity.Condition.prototype.getArgsQueryFinalization_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getArgsQueryFinalization()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.entity.Condition} returns this
 */
proto.entity.Condition.prototype.setArgsQueryFinalization = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes args_query_outcome = 6;
 * @return {!(string|Uint8Array)}
 */
proto.entity.Condition.prototype.getArgsQueryOutcome = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes args_query_outcome = 6;
 * This is a type-conversion wrapper around `getArgsQueryOutcome()`
 * @return {string}
 */
proto.entity.Condition.prototype.getArgsQueryOutcome_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getArgsQueryOutcome()));
};


/**
 * optional bytes args_query_outcome = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getArgsQueryOutcome()`
 * @return {!Uint8Array}
 */
proto.entity.Condition.prototype.getArgsQueryOutcome_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getArgsQueryOutcome()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.entity.Condition} returns this
 */
proto.entity.Condition.prototype.setArgsQueryOutcome = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.entity.CooperativeWithdrawInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.entity.CooperativeWithdrawInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.entity.CooperativeWithdrawInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.entity.CooperativeWithdrawInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelId: msg.getChannelId_asB64(),
    seqNum: jspb.Message.getFieldWithDefault(msg, 2, 0),
    withdraw: (f = msg.getWithdraw()) && proto.entity.AccountAmtPair.toObject(includeInstance, f),
    withdrawDeadline: jspb.Message.getFieldWithDefault(msg, 4, 0),
    recipientChannelId: msg.getRecipientChannelId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.entity.CooperativeWithdrawInfo}
 */
proto.entity.CooperativeWithdrawInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.entity.CooperativeWithdrawInfo;
  return proto.entity.CooperativeWithdrawInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.entity.CooperativeWithdrawInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.entity.CooperativeWithdrawInfo}
 */
proto.entity.CooperativeWithdrawInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChannelId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSeqNum(value);
      break;
    case 3:
      var value = new proto.entity.AccountAmtPair;
      reader.readMessage(value,proto.entity.AccountAmtPair.deserializeBinaryFromReader);
      msg.setWithdraw(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setWithdrawDeadline(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRecipientChannelId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.entity.CooperativeWithdrawInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.entity.CooperativeWithdrawInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.entity.CooperativeWithdrawInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.entity.CooperativeWithdrawInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSeqNum();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getWithdraw();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.entity.AccountAmtPair.serializeBinaryToWriter
    );
  }
  f = message.getWithdrawDeadline();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getRecipientChannelId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional bytes channel_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.entity.CooperativeWithdrawInfo.prototype.getChannelId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes channel_id = 1;
 * This is a type-conversion wrapper around `getChannelId()`
 * @return {string}
 */
proto.entity.CooperativeWithdrawInfo.prototype.getChannelId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChannelId()));
};


/**
 * optional bytes channel_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChannelId()`
 * @return {!Uint8Array}
 */
proto.entity.CooperativeWithdrawInfo.prototype.getChannelId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChannelId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.entity.CooperativeWithdrawInfo} returns this
 */
proto.entity.CooperativeWithdrawInfo.prototype.setChannelId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 seq_num = 2;
 * @return {number}
 */
proto.entity.CooperativeWithdrawInfo.prototype.getSeqNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.entity.CooperativeWithdrawInfo} returns this
 */
proto.entity.CooperativeWithdrawInfo.prototype.setSeqNum = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional AccountAmtPair withdraw = 3;
 * @return {?proto.entity.AccountAmtPair}
 */
proto.entity.CooperativeWithdrawInfo.prototype.getWithdraw = function() {
  return /** @type{?proto.entity.AccountAmtPair} */ (
    jspb.Message.getWrapperField(this, proto.entity.AccountAmtPair, 3));
};


/**
 * @param {?proto.entity.AccountAmtPair|undefined} value
 * @return {!proto.entity.CooperativeWithdrawInfo} returns this
*/
proto.entity.CooperativeWithdrawInfo.prototype.setWithdraw = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.entity.CooperativeWithdrawInfo} returns this
 */
proto.entity.CooperativeWithdrawInfo.prototype.clearWithdraw = function() {
  return this.setWithdraw(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.entity.CooperativeWithdrawInfo.prototype.hasWithdraw = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 withdraw_deadline = 4;
 * @return {number}
 */
proto.entity.CooperativeWithdrawInfo.prototype.getWithdrawDeadline = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.entity.CooperativeWithdrawInfo} returns this
 */
proto.entity.CooperativeWithdrawInfo.prototype.setWithdrawDeadline = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bytes recipient_channel_id = 5;
 * @return {!(string|Uint8Array)}
 */
proto.entity.CooperativeWithdrawInfo.prototype.getRecipientChannelId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes recipient_channel_id = 5;
 * This is a type-conversion wrapper around `getRecipientChannelId()`
 * @return {string}
 */
proto.entity.CooperativeWithdrawInfo.prototype.getRecipientChannelId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRecipientChannelId()));
};


/**
 * optional bytes recipient_channel_id = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRecipientChannelId()`
 * @return {!Uint8Array}
 */
proto.entity.CooperativeWithdrawInfo.prototype.getRecipientChannelId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRecipientChannelId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.entity.CooperativeWithdrawInfo} returns this
 */
proto.entity.CooperativeWithdrawInfo.prototype.setRecipientChannelId = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.entity.PaymentChannelInitializer.prototype.toObject = function(opt_includeInstance) {
  return proto.entity.PaymentChannelInitializer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.entity.PaymentChannelInitializer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.entity.PaymentChannelInitializer.toObject = function(includeInstance, msg) {
  var f, obj = {
    initDistribution: (f = msg.getInitDistribution()) && proto.entity.TokenDistribution.toObject(includeInstance, f),
    openDeadline: jspb.Message.getFieldWithDefault(msg, 2, 0),
    disputeTimeout: jspb.Message.getFieldWithDefault(msg, 3, 0),
    msgValueReceiver: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.entity.PaymentChannelInitializer}
 */
proto.entity.PaymentChannelInitializer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.entity.PaymentChannelInitializer;
  return proto.entity.PaymentChannelInitializer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.entity.PaymentChannelInitializer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.entity.PaymentChannelInitializer}
 */
proto.entity.PaymentChannelInitializer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.entity.TokenDistribution;
      reader.readMessage(value,proto.entity.TokenDistribution.deserializeBinaryFromReader);
      msg.setInitDistribution(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOpenDeadline(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDisputeTimeout(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMsgValueReceiver(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.entity.PaymentChannelInitializer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.entity.PaymentChannelInitializer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.entity.PaymentChannelInitializer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.entity.PaymentChannelInitializer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInitDistribution();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.entity.TokenDistribution.serializeBinaryToWriter
    );
  }
  f = message.getOpenDeadline();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getDisputeTimeout();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getMsgValueReceiver();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional TokenDistribution init_distribution = 1;
 * @return {?proto.entity.TokenDistribution}
 */
proto.entity.PaymentChannelInitializer.prototype.getInitDistribution = function() {
  return /** @type{?proto.entity.TokenDistribution} */ (
    jspb.Message.getWrapperField(this, proto.entity.TokenDistribution, 1));
};


/**
 * @param {?proto.entity.TokenDistribution|undefined} value
 * @return {!proto.entity.PaymentChannelInitializer} returns this
*/
proto.entity.PaymentChannelInitializer.prototype.setInitDistribution = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.entity.PaymentChannelInitializer} returns this
 */
proto.entity.PaymentChannelInitializer.prototype.clearInitDistribution = function() {
  return this.setInitDistribution(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.entity.PaymentChannelInitializer.prototype.hasInitDistribution = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 open_deadline = 2;
 * @return {number}
 */
proto.entity.PaymentChannelInitializer.prototype.getOpenDeadline = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.entity.PaymentChannelInitializer} returns this
 */
proto.entity.PaymentChannelInitializer.prototype.setOpenDeadline = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 dispute_timeout = 3;
 * @return {number}
 */
proto.entity.PaymentChannelInitializer.prototype.getDisputeTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.entity.PaymentChannelInitializer} returns this
 */
proto.entity.PaymentChannelInitializer.prototype.setDisputeTimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 msg_value_receiver = 4;
 * @return {number}
 */
proto.entity.PaymentChannelInitializer.prototype.getMsgValueReceiver = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.entity.PaymentChannelInitializer} returns this
 */
proto.entity.PaymentChannelInitializer.prototype.setMsgValueReceiver = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.entity.CooperativeSettleInfo.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.entity.CooperativeSettleInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.entity.CooperativeSettleInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.entity.CooperativeSettleInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.entity.CooperativeSettleInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelId: msg.getChannelId_asB64(),
    seqNum: jspb.Message.getFieldWithDefault(msg, 2, 0),
    settleBalanceList: jspb.Message.toObjectList(msg.getSettleBalanceList(),
    proto.entity.AccountAmtPair.toObject, includeInstance),
    settleDeadline: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.entity.CooperativeSettleInfo}
 */
proto.entity.CooperativeSettleInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.entity.CooperativeSettleInfo;
  return proto.entity.CooperativeSettleInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.entity.CooperativeSettleInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.entity.CooperativeSettleInfo}
 */
proto.entity.CooperativeSettleInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChannelId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSeqNum(value);
      break;
    case 3:
      var value = new proto.entity.AccountAmtPair;
      reader.readMessage(value,proto.entity.AccountAmtPair.deserializeBinaryFromReader);
      msg.addSettleBalance(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSettleDeadline(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.entity.CooperativeSettleInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.entity.CooperativeSettleInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.entity.CooperativeSettleInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.entity.CooperativeSettleInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSeqNum();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getSettleBalanceList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.entity.AccountAmtPair.serializeBinaryToWriter
    );
  }
  f = message.getSettleDeadline();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional bytes channel_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.entity.CooperativeSettleInfo.prototype.getChannelId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes channel_id = 1;
 * This is a type-conversion wrapper around `getChannelId()`
 * @return {string}
 */
proto.entity.CooperativeSettleInfo.prototype.getChannelId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChannelId()));
};


/**
 * optional bytes channel_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChannelId()`
 * @return {!Uint8Array}
 */
proto.entity.CooperativeSettleInfo.prototype.getChannelId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChannelId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.entity.CooperativeSettleInfo} returns this
 */
proto.entity.CooperativeSettleInfo.prototype.setChannelId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 seq_num = 2;
 * @return {number}
 */
proto.entity.CooperativeSettleInfo.prototype.getSeqNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.entity.CooperativeSettleInfo} returns this
 */
proto.entity.CooperativeSettleInfo.prototype.setSeqNum = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated AccountAmtPair settle_balance = 3;
 * @return {!Array<!proto.entity.AccountAmtPair>}
 */
proto.entity.CooperativeSettleInfo.prototype.getSettleBalanceList = function() {
  return /** @type{!Array<!proto.entity.AccountAmtPair>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.entity.AccountAmtPair, 3));
};


/**
 * @param {!Array<!proto.entity.AccountAmtPair>} value
 * @return {!proto.entity.CooperativeSettleInfo} returns this
*/
proto.entity.CooperativeSettleInfo.prototype.setSettleBalanceList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.entity.AccountAmtPair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.entity.AccountAmtPair}
 */
proto.entity.CooperativeSettleInfo.prototype.addSettleBalance = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.entity.AccountAmtPair, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.entity.CooperativeSettleInfo} returns this
 */
proto.entity.CooperativeSettleInfo.prototype.clearSettleBalanceList = function() {
  return this.setSettleBalanceList([]);
};


/**
 * optional uint64 settle_deadline = 4;
 * @return {number}
 */
proto.entity.CooperativeSettleInfo.prototype.getSettleDeadline = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.entity.CooperativeSettleInfo} returns this
 */
proto.entity.CooperativeSettleInfo.prototype.setSettleDeadline = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.entity.ChannelMigrationInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.entity.ChannelMigrationInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.entity.ChannelMigrationInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.entity.ChannelMigrationInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelId: msg.getChannelId_asB64(),
    fromLedgerAddress: msg.getFromLedgerAddress_asB64(),
    toLedgerAddress: msg.getToLedgerAddress_asB64(),
    migrationDeadline: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.entity.ChannelMigrationInfo}
 */
proto.entity.ChannelMigrationInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.entity.ChannelMigrationInfo;
  return proto.entity.ChannelMigrationInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.entity.ChannelMigrationInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.entity.ChannelMigrationInfo}
 */
proto.entity.ChannelMigrationInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChannelId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFromLedgerAddress(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setToLedgerAddress(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMigrationDeadline(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.entity.ChannelMigrationInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.entity.ChannelMigrationInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.entity.ChannelMigrationInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.entity.ChannelMigrationInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getFromLedgerAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getToLedgerAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getMigrationDeadline();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional bytes channel_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.entity.ChannelMigrationInfo.prototype.getChannelId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes channel_id = 1;
 * This is a type-conversion wrapper around `getChannelId()`
 * @return {string}
 */
proto.entity.ChannelMigrationInfo.prototype.getChannelId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChannelId()));
};


/**
 * optional bytes channel_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChannelId()`
 * @return {!Uint8Array}
 */
proto.entity.ChannelMigrationInfo.prototype.getChannelId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChannelId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.entity.ChannelMigrationInfo} returns this
 */
proto.entity.ChannelMigrationInfo.prototype.setChannelId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes from_ledger_address = 2;
 * @return {!(string|Uint8Array)}
 */
proto.entity.ChannelMigrationInfo.prototype.getFromLedgerAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes from_ledger_address = 2;
 * This is a type-conversion wrapper around `getFromLedgerAddress()`
 * @return {string}
 */
proto.entity.ChannelMigrationInfo.prototype.getFromLedgerAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFromLedgerAddress()));
};


/**
 * optional bytes from_ledger_address = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFromLedgerAddress()`
 * @return {!Uint8Array}
 */
proto.entity.ChannelMigrationInfo.prototype.getFromLedgerAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFromLedgerAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.entity.ChannelMigrationInfo} returns this
 */
proto.entity.ChannelMigrationInfo.prototype.setFromLedgerAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes to_ledger_address = 3;
 * @return {!(string|Uint8Array)}
 */
proto.entity.ChannelMigrationInfo.prototype.getToLedgerAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes to_ledger_address = 3;
 * This is a type-conversion wrapper around `getToLedgerAddress()`
 * @return {string}
 */
proto.entity.ChannelMigrationInfo.prototype.getToLedgerAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getToLedgerAddress()));
};


/**
 * optional bytes to_ledger_address = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getToLedgerAddress()`
 * @return {!Uint8Array}
 */
proto.entity.ChannelMigrationInfo.prototype.getToLedgerAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getToLedgerAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.entity.ChannelMigrationInfo} returns this
 */
proto.entity.ChannelMigrationInfo.prototype.setToLedgerAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional uint64 migration_deadline = 4;
 * @return {number}
 */
proto.entity.ChannelMigrationInfo.prototype.getMigrationDeadline = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.entity.ChannelMigrationInfo} returns this
 */
proto.entity.ChannelMigrationInfo.prototype.setMigrationDeadline = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * @enum {number}
 */
proto.entity.TokenType = {
  INVALID: 0,
  ETH: 1,
  ERC20: 2
};

/**
 * @enum {number}
 */
proto.entity.TransferFunctionType = {
  BOOLEAN_AND: 0,
  BOOLEAN_OR: 1,
  BOOLEAN_CIRCUIT: 2,
  NUMERIC_ADD: 3,
  NUMERIC_MAX: 4,
  NUMERIC_MIN: 5
};

/**
 * @enum {number}
 */
proto.entity.ConditionType = {
  HASH_LOCK: 0,
  DEPLOYED_CONTRACT: 1,
  VIRTUAL_CONTRACT: 2
};


/**
 * A tuple of {field number, class constructor} for the extension
 * field named `soltype`.
 * @type {!jspb.ExtensionFieldInfo<string>}
 */
proto.entity.soltype = new jspb.ExtensionFieldInfo(
    1001,
    {soltype: 0},
    null,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         null),
    0);

google_protobuf_descriptor_pb.FieldOptions.extensionsBinary[1001] = new jspb.ExtensionFieldBinaryInfo(
    proto.entity.soltype,
    jspb.BinaryReader.prototype.readString,
    jspb.BinaryWriter.prototype.writeString,
    undefined,
    undefined,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
google_protobuf_descriptor_pb.FieldOptions.extensions[1001] = proto.entity.soltype;

goog.object.extend(exports, proto.entity);
